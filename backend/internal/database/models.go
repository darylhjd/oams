// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ClassType string

const (
	ClassTypeLEC ClassType = "LEC"
	ClassTypeTUT ClassType = "TUT"
	ClassTypeLAB ClassType = "LAB"
)

func (e *ClassType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ClassType(s)
	case string:
		*e = ClassType(s)
	default:
		return fmt.Errorf("unsupported scan type for ClassType: %T", src)
	}
	return nil
}

type NullClassType struct {
	ClassType ClassType `json:"class_type"`
	Valid     bool      `json:"valid"` // Valid is true if ClassType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullClassType) Scan(value interface{}) error {
	if value == nil {
		ns.ClassType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ClassType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullClassType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ClassType), nil
}

type UserRole string

const (
	UserRoleSTUDENT           UserRole = "STUDENT"
	UserRoleCOURSECOORDINATOR UserRole = "COURSE_COORDINATOR"
	UserRoleADMIN             UserRole = "ADMIN"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Class struct {
	ID        int64            `json:"id"`
	Code      string           `json:"code"`
	Year      int32            `json:"year"`
	Semester  string           `json:"semester"`
	Programme string           `json:"programme"`
	Au        int16            `json:"au"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type ClassGroup struct {
	ID        int64            `json:"id"`
	ClassID   int64            `json:"class_id"`
	Name      string           `json:"name"`
	ClassType ClassType        `json:"class_type"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type ClassGroupSession struct {
	ID           int64            `json:"id"`
	ClassGroupID int64            `json:"class_group_id"`
	StartTime    pgtype.Timestamp `json:"start_time"`
	EndTime      pgtype.Timestamp `json:"end_time"`
	Venue        string           `json:"venue"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

type SessionEnrollment struct {
	SessionID int64            `json:"session_id"`
	UserID    string           `json:"user_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

type User struct {
	ID        string           `json:"id"`
	Name      string           `json:"name"`
	Email     string           `json:"email"`
	Role      UserRole         `json:"role"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}
