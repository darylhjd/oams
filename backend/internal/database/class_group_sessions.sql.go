// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: class_group_sessions.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const updateClassGroupSession = `-- name: UpdateClassGroupSession :one
UPDATE class_group_sessions
SET class_group_id = COALESCE($2, class_group_id),
    start_time     = COALESCE($3, start_time),
    end_time       = COALESCE($4, end_time),
    venue          = COALESCE($5, venue)
WHERE id = $1
RETURNING id, class_group_id, start_time, end_time, venue, updated_at
`

type UpdateClassGroupSessionParams struct {
	ID           int64              `json:"id"`
	ClassGroupID pgtype.Int8        `json:"class_group_id"`
	StartTime    pgtype.Timestamptz `json:"start_time"`
	EndTime      pgtype.Timestamptz `json:"end_time"`
	Venue        pgtype.Text        `json:"venue"`
}

type UpdateClassGroupSessionRow struct {
	ID           int64              `json:"id"`
	ClassGroupID int64              `json:"class_group_id"`
	StartTime    pgtype.Timestamptz `json:"start_time"`
	EndTime      pgtype.Timestamptz `json:"end_time"`
	Venue        string             `json:"venue"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateClassGroupSession(ctx context.Context, arg UpdateClassGroupSessionParams) (UpdateClassGroupSessionRow, error) {
	row := q.db.QueryRow(ctx, updateClassGroupSession,
		arg.ID,
		arg.ClassGroupID,
		arg.StartTime,
		arg.EndTime,
		arg.Venue,
	)
	var i UpdateClassGroupSessionRow
	err := row.Scan(
		&i.ID,
		&i.ClassGroupID,
		&i.StartTime,
		&i.EndTime,
		&i.Venue,
		&i.UpdatedAt,
	)
	return i, err
}
