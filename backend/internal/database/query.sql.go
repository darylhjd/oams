// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: query.sql

package database

import (
	"context"
)

const listClassGroupSessions = `-- name: ListClassGroupSessions :many
SELECT id, class_group_id, start_time, end_time, venue, created_at, updated_at
FROM class_group_sessions
ORDER BY class_group_id, start_time, end_time
`

func (q *Queries) ListClassGroupSessions(ctx context.Context) ([]ClassGroupSession, error) {
	rows, err := q.db.Query(ctx, listClassGroupSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClassGroupSession
	for rows.Next() {
		var i ClassGroupSession
		if err := rows.Scan(
			&i.ID,
			&i.ClassGroupID,
			&i.StartTime,
			&i.EndTime,
			&i.Venue,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClassGroups = `-- name: ListClassGroups :many
SELECT id, class_id, name, class_type, created_at, updated_at
FROM class_groups
ORDER BY class_id, name
`

func (q *Queries) ListClassGroups(ctx context.Context) ([]ClassGroup, error) {
	rows, err := q.db.Query(ctx, listClassGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClassGroup
	for rows.Next() {
		var i ClassGroup
		if err := rows.Scan(
			&i.ID,
			&i.ClassID,
			&i.Name,
			&i.ClassType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSessionEnrollments = `-- name: ListSessionEnrollments :many
SELECT session_id, user_id, created_at
FROM session_enrollments
ORDER BY session_id, user_id
`

func (q *Queries) ListSessionEnrollments(ctx context.Context) ([]SessionEnrollment, error) {
	rows, err := q.db.Query(ctx, listSessionEnrollments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionEnrollment
	for rows.Next() {
		var i SessionEnrollment
		if err := rows.Scan(&i.SessionID, &i.UserID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
