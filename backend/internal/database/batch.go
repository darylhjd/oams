// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: batch.go

package database

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const createClassGroupSessions = `-- name: CreateClassGroupSessions :batchmany
INSERT INTO class_group_sessions (class_group_id, start_time, end_time, venue, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
RETURNING id
`

type CreateClassGroupSessionsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateClassGroupSessionsParams struct {
	ClassGroupID int64            `json:"class_group_id"`
	StartTime    pgtype.Timestamp `json:"start_time"`
	EndTime      pgtype.Timestamp `json:"end_time"`
	Venue        string           `json:"venue"`
}

func (q *Queries) CreateClassGroupSessions(ctx context.Context, arg []CreateClassGroupSessionsParams) *CreateClassGroupSessionsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ClassGroupID,
			a.StartTime,
			a.EndTime,
			a.Venue,
		}
		batch.Queue(createClassGroupSessions, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateClassGroupSessionsBatchResults{br, len(arg), false}
}

func (b *CreateClassGroupSessionsBatchResults) Query(f func(int, []int64, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []int64
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var id int64
				if err := rows.Scan(&id); err != nil {
					return err
				}
				items = append(items, id)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *CreateClassGroupSessionsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const createClassGroups = `-- name: CreateClassGroups :batchmany
INSERT INTO class_groups (course_id, name, class_type, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING id
`

type CreateClassGroupsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateClassGroupsParams struct {
	CourseID  int64     `json:"course_id"`
	Name      string    `json:"name"`
	ClassType ClassType `json:"class_type"`
}

func (q *Queries) CreateClassGroups(ctx context.Context, arg []CreateClassGroupsParams) *CreateClassGroupsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.CourseID,
			a.Name,
			a.ClassType,
		}
		batch.Queue(createClassGroups, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateClassGroupsBatchResults{br, len(arg), false}
}

func (b *CreateClassGroupsBatchResults) Query(f func(int, []int64, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []int64
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var id int64
				if err := rows.Scan(&id); err != nil {
					return err
				}
				items = append(items, id)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *CreateClassGroupsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const createCourses = `-- name: CreateCourses :batchmany
INSERT INTO courses (code, year, semester, programme, au, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
RETURNING id
`

type CreateCoursesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateCoursesParams struct {
	Code      string `json:"code"`
	Year      int32  `json:"year"`
	Semester  string `json:"semester"`
	Programme string `json:"programme"`
	Au        int16  `json:"au"`
}

func (q *Queries) CreateCourses(ctx context.Context, arg []CreateCoursesParams) *CreateCoursesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Code,
			a.Year,
			a.Semester,
			a.Programme,
			a.Au,
		}
		batch.Queue(createCourses, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateCoursesBatchResults{br, len(arg), false}
}

func (b *CreateCoursesBatchResults) Query(f func(int, []int64, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []int64
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var id int64
				if err := rows.Scan(&id); err != nil {
					return err
				}
				items = append(items, id)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *CreateCoursesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const createSessionEnrollments = `-- name: CreateSessionEnrollments :batchmany
INSERT INTO session_enrollments (session_id, student_id)
VALUES ($1, $2)
RETURNING session_id, student_id
`

type CreateSessionEnrollmentsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateSessionEnrollmentsParams struct {
	SessionID int64  `json:"session_id"`
	StudentID string `json:"student_id"`
}

func (q *Queries) CreateSessionEnrollments(ctx context.Context, arg []CreateSessionEnrollmentsParams) *CreateSessionEnrollmentsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.SessionID,
			a.StudentID,
		}
		batch.Queue(createSessionEnrollments, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateSessionEnrollmentsBatchResults{br, len(arg), false}
}

func (b *CreateSessionEnrollmentsBatchResults) Query(f func(int, []SessionEnrollment, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []SessionEnrollment
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var i SessionEnrollment
				if err := rows.Scan(&i.SessionID, &i.StudentID); err != nil {
					return err
				}
				items = append(items, i)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *CreateSessionEnrollmentsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const createStudents = `-- name: CreateStudents :batchmany
INSERT INTO students (id, name, email, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING id
`

type CreateStudentsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateStudentsParams struct {
	ID    string      `json:"id"`
	Name  string      `json:"name"`
	Email pgtype.Text `json:"email"`
}

func (q *Queries) CreateStudents(ctx context.Context, arg []CreateStudentsParams) *CreateStudentsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ID,
			a.Name,
			a.Email,
		}
		batch.Queue(createStudents, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateStudentsBatchResults{br, len(arg), false}
}

func (b *CreateStudentsBatchResults) Query(f func(int, []string, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []string
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var id string
				if err := rows.Scan(&id); err != nil {
					return err
				}
				items = append(items, id)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *CreateStudentsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
