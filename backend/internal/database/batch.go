// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: batch.go

package database

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const createClassGroupSessions = `-- name: CreateClassGroupSessions :batchmany
INSERT INTO class_group_sessions (class_group_id, start_time, end_time, venue, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
ON CONFLICT ON CONSTRAINT ux_class_group_id_start_time
    DO UPDATE SET end_time   = $3,
                  venue      = $4,
                  updated_at = NOW()
RETURNING id, class_group_id, start_time, end_time, venue, created_at, updated_at
`

type CreateClassGroupSessionsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateClassGroupSessionsParams struct {
	ClassGroupID int64            `json:"class_group_id"`
	StartTime    pgtype.Timestamp `json:"start_time"`
	EndTime      pgtype.Timestamp `json:"end_time"`
	Venue        string           `json:"venue"`
}

func (q *Queries) CreateClassGroupSessions(ctx context.Context, arg []CreateClassGroupSessionsParams) *CreateClassGroupSessionsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ClassGroupID,
			a.StartTime,
			a.EndTime,
			a.Venue,
		}
		batch.Queue(createClassGroupSessions, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateClassGroupSessionsBatchResults{br, len(arg), false}
}

func (b *CreateClassGroupSessionsBatchResults) Query(f func(int, []ClassGroupSession, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []ClassGroupSession
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var i ClassGroupSession
				if err := rows.Scan(
					&i.ID,
					&i.ClassGroupID,
					&i.StartTime,
					&i.EndTime,
					&i.Venue,
					&i.CreatedAt,
					&i.UpdatedAt,
				); err != nil {
					return err
				}
				items = append(items, i)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *CreateClassGroupSessionsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const createClassGroups = `-- name: CreateClassGroups :batchmany
INSERT INTO class_groups (course_id, name, class_type, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
ON CONFLICT ON CONSTRAINT ux_course_id_name
    DO UPDATE SET class_type = $3,
                  updated_at = NOW()
RETURNING id, course_id, name, class_type, created_at, updated_at
`

type CreateClassGroupsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateClassGroupsParams struct {
	CourseID  int64     `json:"course_id"`
	Name      string    `json:"name"`
	ClassType ClassType `json:"class_type"`
}

func (q *Queries) CreateClassGroups(ctx context.Context, arg []CreateClassGroupsParams) *CreateClassGroupsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.CourseID,
			a.Name,
			a.ClassType,
		}
		batch.Queue(createClassGroups, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateClassGroupsBatchResults{br, len(arg), false}
}

func (b *CreateClassGroupsBatchResults) Query(f func(int, []ClassGroup, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []ClassGroup
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var i ClassGroup
				if err := rows.Scan(
					&i.ID,
					&i.CourseID,
					&i.Name,
					&i.ClassType,
					&i.CreatedAt,
					&i.UpdatedAt,
				); err != nil {
					return err
				}
				items = append(items, i)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *CreateClassGroupsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const createSessionEnrollments = `-- name: CreateSessionEnrollments :batchmany
INSERT INTO session_enrollments (session_id, student_id, created_at)
VALUES ($1, $2, NOW())
ON CONFLICT DO NOTHING
RETURNING session_id, student_id, created_at
`

type CreateSessionEnrollmentsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateSessionEnrollmentsParams struct {
	SessionID int64  `json:"session_id"`
	StudentID string `json:"student_id"`
}

func (q *Queries) CreateSessionEnrollments(ctx context.Context, arg []CreateSessionEnrollmentsParams) *CreateSessionEnrollmentsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.SessionID,
			a.StudentID,
		}
		batch.Queue(createSessionEnrollments, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateSessionEnrollmentsBatchResults{br, len(arg), false}
}

func (b *CreateSessionEnrollmentsBatchResults) Query(f func(int, []SessionEnrollment, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []SessionEnrollment
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var i SessionEnrollment
				if err := rows.Scan(&i.SessionID, &i.StudentID, &i.CreatedAt); err != nil {
					return err
				}
				items = append(items, i)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *CreateSessionEnrollmentsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const upsertCourses = `-- name: UpsertCourses :batchmany
INSERT INTO courses (code, year, semester, programme, au, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
ON CONFLICT ON CONSTRAINT ux_code_year_semester
    DO UPDATE SET programme  = $4,
                  au         = $5,
                  updated_at = NOW()
RETURNING id, code, year, semester, programme, au, created_at, updated_at
`

type UpsertCoursesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpsertCoursesParams struct {
	Code      string `json:"code"`
	Year      int32  `json:"year"`
	Semester  string `json:"semester"`
	Programme string `json:"programme"`
	Au        int16  `json:"au"`
}

func (q *Queries) UpsertCourses(ctx context.Context, arg []UpsertCoursesParams) *UpsertCoursesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Code,
			a.Year,
			a.Semester,
			a.Programme,
			a.Au,
		}
		batch.Queue(upsertCourses, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpsertCoursesBatchResults{br, len(arg), false}
}

func (b *UpsertCoursesBatchResults) Query(f func(int, []Course, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []Course
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var i Course
				if err := rows.Scan(
					&i.ID,
					&i.Code,
					&i.Year,
					&i.Semester,
					&i.Programme,
					&i.Au,
					&i.CreatedAt,
					&i.UpdatedAt,
				); err != nil {
					return err
				}
				items = append(items, i)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *UpsertCoursesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const upsertStudents = `-- name: UpsertStudents :batchmany
INSERT INTO students (id, name, email, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
ON CONFLICT (id)
    DO UPDATE SET name       = $2,
                  email      = $3,
                  updated_at = NOW()
RETURNING id, name, email, created_at, updated_at
`

type UpsertStudentsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpsertStudentsParams struct {
	ID    string      `json:"id"`
	Name  string      `json:"name"`
	Email pgtype.Text `json:"email"`
}

func (q *Queries) UpsertStudents(ctx context.Context, arg []UpsertStudentsParams) *UpsertStudentsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ID,
			a.Name,
			a.Email,
		}
		batch.Queue(upsertStudents, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpsertStudentsBatchResults{br, len(arg), false}
}

func (b *UpsertStudentsBatchResults) Query(f func(int, []Student, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []Student
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var i Student
				if err := rows.Scan(
					&i.ID,
					&i.Name,
					&i.Email,
					&i.CreatedAt,
					&i.UpdatedAt,
				); err != nil {
					return err
				}
				items = append(items, i)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *UpsertStudentsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
