// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: batch.go

package database

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const createSessionEnrollments = `-- name: CreateSessionEnrollments :batchone
INSERT INTO session_enrollments (session_id, user_id, created_at)
VALUES ($1, $2, NOW())
RETURNING session_id, user_id, created_at
`

type CreateSessionEnrollmentsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateSessionEnrollmentsParams struct {
	SessionID int64  `json:"session_id"`
	UserID    string `json:"user_id"`
}

func (q *Queries) CreateSessionEnrollments(ctx context.Context, arg []CreateSessionEnrollmentsParams) *CreateSessionEnrollmentsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.SessionID,
			a.UserID,
		}
		batch.Queue(createSessionEnrollments, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateSessionEnrollmentsBatchResults{br, len(arg), false}
}

func (b *CreateSessionEnrollmentsBatchResults) QueryRow(f func(int, SessionEnrollment, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var i SessionEnrollment
		if b.closed {
			if f != nil {
				f(t, i, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(&i.SessionID, &i.UserID, &i.CreatedAt)
		if f != nil {
			f(t, i, err)
		}
	}
}

func (b *CreateSessionEnrollmentsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const upsertClassGroupSessions = `-- name: UpsertClassGroupSessions :batchone
INSERT INTO class_group_sessions (class_group_id, start_time, end_time, venue, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
ON CONFLICT ON CONSTRAINT ux_class_group_id_start_time
    DO UPDATE SET end_time   = $3,
                  venue      = $4,
                  updated_at = NOW()
RETURNING id, class_group_id, start_time, end_time, venue, created_at, updated_at
`

type UpsertClassGroupSessionsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpsertClassGroupSessionsParams struct {
	ClassGroupID int64            `json:"class_group_id"`
	StartTime    pgtype.Timestamp `json:"start_time"`
	EndTime      pgtype.Timestamp `json:"end_time"`
	Venue        string           `json:"venue"`
}

func (q *Queries) UpsertClassGroupSessions(ctx context.Context, arg []UpsertClassGroupSessionsParams) *UpsertClassGroupSessionsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ClassGroupID,
			a.StartTime,
			a.EndTime,
			a.Venue,
		}
		batch.Queue(upsertClassGroupSessions, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpsertClassGroupSessionsBatchResults{br, len(arg), false}
}

func (b *UpsertClassGroupSessionsBatchResults) QueryRow(f func(int, ClassGroupSession, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var i ClassGroupSession
		if b.closed {
			if f != nil {
				f(t, i, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(
			&i.ID,
			&i.ClassGroupID,
			&i.StartTime,
			&i.EndTime,
			&i.Venue,
			&i.CreatedAt,
			&i.UpdatedAt,
		)
		if f != nil {
			f(t, i, err)
		}
	}
}

func (b *UpsertClassGroupSessionsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const upsertClassGroups = `-- name: UpsertClassGroups :batchone
INSERT INTO class_groups (class_id, name, class_type, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
ON CONFLICT ON CONSTRAINT ux_class_id_name
    DO UPDATE SET class_type = $3,
                  updated_at = NOW()
RETURNING id, class_id, name, class_type, created_at, updated_at
`

type UpsertClassGroupsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpsertClassGroupsParams struct {
	ClassID   int64     `json:"class_id"`
	Name      string    `json:"name"`
	ClassType ClassType `json:"class_type"`
}

func (q *Queries) UpsertClassGroups(ctx context.Context, arg []UpsertClassGroupsParams) *UpsertClassGroupsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ClassID,
			a.Name,
			a.ClassType,
		}
		batch.Queue(upsertClassGroups, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpsertClassGroupsBatchResults{br, len(arg), false}
}

func (b *UpsertClassGroupsBatchResults) QueryRow(f func(int, ClassGroup, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var i ClassGroup
		if b.closed {
			if f != nil {
				f(t, i, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(
			&i.ID,
			&i.ClassID,
			&i.Name,
			&i.ClassType,
			&i.CreatedAt,
			&i.UpdatedAt,
		)
		if f != nil {
			f(t, i, err)
		}
	}
}

func (b *UpsertClassGroupsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const upsertClasses = `-- name: UpsertClasses :batchone
INSERT
INTO classes (code, year, semester, programme, au, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
ON CONFLICT
    ON CONSTRAINT ux_code_year_semester
    DO UPDATE SET programme  = $4,
                  au         = $5,
                  updated_at = NOW()
RETURNING id, code, year, semester, programme, au, created_at, updated_at
`

type UpsertClassesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpsertClassesParams struct {
	Code      string `json:"code"`
	Year      int32  `json:"year"`
	Semester  string `json:"semester"`
	Programme string `json:"programme"`
	Au        int16  `json:"au"`
}

func (q *Queries) UpsertClasses(ctx context.Context, arg []UpsertClassesParams) *UpsertClassesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Code,
			a.Year,
			a.Semester,
			a.Programme,
			a.Au,
		}
		batch.Queue(upsertClasses, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpsertClassesBatchResults{br, len(arg), false}
}

func (b *UpsertClassesBatchResults) QueryRow(f func(int, Class, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var i Class
		if b.closed {
			if f != nil {
				f(t, i, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(
			&i.ID,
			&i.Code,
			&i.Year,
			&i.Semester,
			&i.Programme,
			&i.Au,
			&i.CreatedAt,
			&i.UpdatedAt,
		)
		if f != nil {
			f(t, i, err)
		}
	}
}

func (b *UpsertClassesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const upsertUsers = `-- name: UpsertUsers :batchone
INSERT INTO users (id, name, email, role, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
ON CONFLICT (id)
    DO UPDATE SET name       = $2,
                  email      = $3,
                  role       = $4,
                  updated_at = NOW()
RETURNING id, name, email, role, created_at, updated_at
`

type UpsertUsersBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpsertUsersParams struct {
	ID    string   `json:"id"`
	Name  string   `json:"name"`
	Email string   `json:"email"`
	Role  UserRole `json:"role"`
}

func (q *Queries) UpsertUsers(ctx context.Context, arg []UpsertUsersParams) *UpsertUsersBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ID,
			a.Name,
			a.Email,
			a.Role,
		}
		batch.Queue(upsertUsers, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpsertUsersBatchResults{br, len(arg), false}
}

func (b *UpsertUsersBatchResults) QueryRow(f func(int, User, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var i User
		if b.closed {
			if f != nil {
				f(t, i, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		)
		if f != nil {
			f(t, i, err)
		}
	}
}

func (b *UpsertUsersBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
