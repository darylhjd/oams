// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: session_enrollments.sql

package database

import (
	"context"
)

const getSessionEnrollment = `-- name: GetSessionEnrollment :one
SELECT id, session_id, user_id, attended, created_at
FROM session_enrollments
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetSessionEnrollment(ctx context.Context, id int64) (SessionEnrollment, error) {
	row := q.db.QueryRow(ctx, getSessionEnrollment, id)
	var i SessionEnrollment
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.UserID,
		&i.Attended,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionEnrollmentsBySessionID = `-- name: GetSessionEnrollmentsBySessionID :many
SELECT id, session_id, user_id, attended, created_at
FROM session_enrollments
WHERE session_id = $1
`

func (q *Queries) GetSessionEnrollmentsBySessionID(ctx context.Context, sessionID int64) ([]SessionEnrollment, error) {
	rows, err := q.db.Query(ctx, getSessionEnrollmentsBySessionID, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionEnrollment
	for rows.Next() {
		var i SessionEnrollment
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.UserID,
			&i.Attended,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSessionEnrollmentsByUserID = `-- name: GetSessionEnrollmentsByUserID :many
SELECT id, session_id, user_id, attended, created_at
FROM session_enrollments
WHERE user_id = $1
`

func (q *Queries) GetSessionEnrollmentsByUserID(ctx context.Context, userID string) ([]SessionEnrollment, error) {
	rows, err := q.db.Query(ctx, getSessionEnrollmentsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionEnrollment
	for rows.Next() {
		var i SessionEnrollment
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.UserID,
			&i.Attended,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSessionEnrollments = `-- name: ListSessionEnrollments :many
SELECT id, session_id, user_id, attended, created_at
FROM session_enrollments
ORDER BY session_id, user_id
`

func (q *Queries) ListSessionEnrollments(ctx context.Context) ([]SessionEnrollment, error) {
	rows, err := q.db.Query(ctx, listSessionEnrollments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionEnrollment
	for rows.Next() {
		var i SessionEnrollment
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.UserID,
			&i.Attended,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
