// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: session_enrollments.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSessionEnrollment = `-- name: CreateSessionEnrollment :one
INSERT INTO session_enrollments (session_id, user_id, attended, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING id, session_id, user_id, attended, created_at
`

type CreateSessionEnrollmentParams struct {
	SessionID int64  `json:"session_id"`
	UserID    string `json:"user_id"`
	Attended  bool   `json:"attended"`
}

type CreateSessionEnrollmentRow struct {
	ID        int64            `json:"id"`
	SessionID int64            `json:"session_id"`
	UserID    string           `json:"user_id"`
	Attended  bool             `json:"attended"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateSessionEnrollment(ctx context.Context, arg CreateSessionEnrollmentParams) (CreateSessionEnrollmentRow, error) {
	row := q.db.QueryRow(ctx, createSessionEnrollment, arg.SessionID, arg.UserID, arg.Attended)
	var i CreateSessionEnrollmentRow
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.UserID,
		&i.Attended,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionEnrollment = `-- name: GetSessionEnrollment :one
SELECT id, session_id, user_id, attended, created_at, updated_at
FROM session_enrollments
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetSessionEnrollment(ctx context.Context, id int64) (SessionEnrollment, error) {
	row := q.db.QueryRow(ctx, getSessionEnrollment, id)
	var i SessionEnrollment
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.UserID,
		&i.Attended,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSessionEnrollmentsBySessionID = `-- name: GetSessionEnrollmentsBySessionID :many
SELECT id, session_id, user_id, attended, created_at, updated_at
FROM session_enrollments
WHERE session_id = $1
`

func (q *Queries) GetSessionEnrollmentsBySessionID(ctx context.Context, sessionID int64) ([]SessionEnrollment, error) {
	rows, err := q.db.Query(ctx, getSessionEnrollmentsBySessionID, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionEnrollment
	for rows.Next() {
		var i SessionEnrollment
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.UserID,
			&i.Attended,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSessionEnrollmentsByUserID = `-- name: GetSessionEnrollmentsByUserID :many
SELECT id, session_id, user_id, attended, created_at, updated_at
FROM session_enrollments
WHERE user_id = $1
`

func (q *Queries) GetSessionEnrollmentsByUserID(ctx context.Context, userID string) ([]SessionEnrollment, error) {
	rows, err := q.db.Query(ctx, getSessionEnrollmentsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionEnrollment
	for rows.Next() {
		var i SessionEnrollment
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.UserID,
			&i.Attended,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSessionEnrollments = `-- name: ListSessionEnrollments :many
SELECT id, session_id, user_id, attended, created_at, updated_at
FROM session_enrollments
ORDER BY session_id, user_id
`

func (q *Queries) ListSessionEnrollments(ctx context.Context) ([]SessionEnrollment, error) {
	rows, err := q.db.Query(ctx, listSessionEnrollments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionEnrollment
	for rows.Next() {
		var i SessionEnrollment
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.UserID,
			&i.Attended,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSessionEnrollment = `-- name: UpdateSessionEnrollment :one
UPDATE session_enrollments
SET session_id = COALESCE($2, session_id),
    user_id    = COALESCE($3, user_id),
    attended   = COALESCE($4, attended),
    updated_at =
        CASE
            WHEN (NOT ($2::BIGINT IS NULL AND
                       $3::BIGINT IS NULL AND
                       $4::BOOLEAN IS NULL))
                AND
                 (COALESCE($2, session_id) <> session_id OR
                  COALESCE($3, user_id) <> user_id OR
                  COALESCE($4, attended) <> attended)
                THEN NOW()
            ELSE updated_at END
WHERE id = $1
RETURNING id, session_id, user_id, attended, updated_at
`

type UpdateSessionEnrollmentParams struct {
	ID        int64       `json:"id"`
	SessionID pgtype.Int8 `json:"session_id"`
	UserID    pgtype.Text `json:"user_id"`
	Attended  pgtype.Bool `json:"attended"`
}

type UpdateSessionEnrollmentRow struct {
	ID        int64            `json:"id"`
	SessionID int64            `json:"session_id"`
	UserID    string           `json:"user_id"`
	Attended  bool             `json:"attended"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateSessionEnrollment(ctx context.Context, arg UpdateSessionEnrollmentParams) (UpdateSessionEnrollmentRow, error) {
	row := q.db.QueryRow(ctx, updateSessionEnrollment,
		arg.ID,
		arg.SessionID,
		arg.UserID,
		arg.Attended,
	)
	var i UpdateSessionEnrollmentRow
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.UserID,
		&i.Attended,
		&i.UpdatedAt,
	)
	return i, err
}
