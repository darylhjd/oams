// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserUpcomingClassGroupSessions = `-- name: GetUserUpcomingClassGroupSessions :many
SELECT c.code,
       c.year,
       c.semester,
       cg.name,
       cg.class_type,
       cgs.start_time,
       cgs.end_time,
       cgs.venue
FROM class_group_sessions cgs
         INNER JOIN class_groups cg
                    ON cgs.class_group_id = cg.id
         INNER JOIN classes c
                    ON cg.class_id = c.id
WHERE cgs.id IN (SELECT session_id
                 FROM session_enrollments
                 WHERE user_id = $1)
  AND cgs.end_time > NOW()
ORDER BY cgs.start_time, cgs.end_time
`

type GetUserUpcomingClassGroupSessionsRow struct {
	Code      string             `json:"code"`
	Year      int32              `json:"year"`
	Semester  string             `json:"semester"`
	Name      string             `json:"name"`
	ClassType ClassType          `json:"class_type"`
	StartTime pgtype.Timestamptz `json:"start_time"`
	EndTime   pgtype.Timestamptz `json:"end_time"`
	Venue     string             `json:"venue"`
}

// Get information on a user's upcoming classes. This query returns all session enrollments for that user that are
// currently happening or will happen in the future. The sessions are returned in ascending order of start time and then
// end time.
func (q *Queries) GetUserUpcomingClassGroupSessions(ctx context.Context, userID string) ([]GetUserUpcomingClassGroupSessionsRow, error) {
	rows, err := q.db.Query(ctx, getUserUpcomingClassGroupSessions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserUpcomingClassGroupSessionsRow
	for rows.Next() {
		var i GetUserUpcomingClassGroupSessionsRow
		if err := rows.Scan(
			&i.Code,
			&i.Year,
			&i.Semester,
			&i.Name,
			&i.ClassType,
			&i.StartTime,
			&i.EndTime,
			&i.Venue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name       = COALESCE($2, name),
    email      = COALESCE($3, email),
    role       = COALESCE($4, role),
    updated_at =
        CASE
            WHEN (COALESCE($2, name) <> name OR
                  COALESCE($3, email) <> email OR
                  COALESCE($4, role) <> role)
                THEN NOW()
            ELSE updated_at
            END
WHERE id = $1
RETURNING id, name, email, role, updated_at
`

type UpdateUserParams struct {
	ID    string       `json:"id"`
	Name  pgtype.Text  `json:"name"`
	Email pgtype.Text  `json:"email"`
	Role  NullUserRole `json:"role"`
}

type UpdateUserRow struct {
	ID        string             `json:"id"`
	Name      string             `json:"name"`
	Email     string             `json:"email"`
	Role      UserRole           `json:"role"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Role,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.UpdatedAt,
	)
	return i, err
}
