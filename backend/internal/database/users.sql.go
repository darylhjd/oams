// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name       = COALESCE($2, name),
    email      = COALESCE($3, email),
    role       = COALESCE($4, role)
WHERE id = $1
RETURNING id, name, email, role, updated_at
`

type UpdateUserParams struct {
	ID    string       `json:"id"`
	Name  pgtype.Text  `json:"name"`
	Email pgtype.Text  `json:"email"`
	Role  NullUserRole `json:"role"`
}

type UpdateUserRow struct {
	ID        string             `json:"id"`
	Name      string             `json:"name"`
	Email     string             `json:"email"`
	Role      UserRole           `json:"role"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Role,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.UpdatedAt,
	)
	return i, err
}
