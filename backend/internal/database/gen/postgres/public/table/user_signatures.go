//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserSignatures = newUserSignaturesTable("public", "user_signatures", "user_signature")

type userSignaturesTable struct {
	postgres.Table

	// Columns
	UserID    postgres.ColumnString
	Signature postgres.ColumnString
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserSignaturesTable struct {
	userSignaturesTable

	EXCLUDED userSignaturesTable
}

// AS creates new UserSignaturesTable with assigned alias
func (a UserSignaturesTable) AS(alias string) *UserSignaturesTable {
	return newUserSignaturesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserSignaturesTable with assigned schema name
func (a UserSignaturesTable) FromSchema(schemaName string) *UserSignaturesTable {
	return newUserSignaturesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserSignaturesTable with assigned table prefix
func (a UserSignaturesTable) WithPrefix(prefix string) *UserSignaturesTable {
	return newUserSignaturesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserSignaturesTable with assigned table suffix
func (a UserSignaturesTable) WithSuffix(suffix string) *UserSignaturesTable {
	return newUserSignaturesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserSignaturesTable(schemaName, tableName, alias string) *UserSignaturesTable {
	return &UserSignaturesTable{
		userSignaturesTable: newUserSignaturesTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newUserSignaturesTableImpl("", "excluded", ""),
	}
}

func newUserSignaturesTableImpl(schemaName, tableName, alias string) userSignaturesTable {
	var (
		UserIDColumn    = postgres.StringColumn("user_id")
		SignatureColumn = postgres.StringColumn("signature")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{UserIDColumn, SignatureColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{SignatureColumn, UpdatedAtColumn}
	)

	return userSignaturesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:    UserIDColumn,
		Signature: SignatureColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
