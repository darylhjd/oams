//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ClassGroups = newClassGroupsTable("public", "class_groups", "")

type classGroupsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	ClassID   postgres.ColumnInteger
	Name      postgres.ColumnString
	ClassType postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ClassGroupsTable struct {
	classGroupsTable

	EXCLUDED classGroupsTable
}

// AS creates new ClassGroupsTable with assigned alias
func (a ClassGroupsTable) AS(alias string) *ClassGroupsTable {
	return newClassGroupsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ClassGroupsTable with assigned schema name
func (a ClassGroupsTable) FromSchema(schemaName string) *ClassGroupsTable {
	return newClassGroupsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ClassGroupsTable with assigned table prefix
func (a ClassGroupsTable) WithPrefix(prefix string) *ClassGroupsTable {
	return newClassGroupsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ClassGroupsTable with assigned table suffix
func (a ClassGroupsTable) WithSuffix(suffix string) *ClassGroupsTable {
	return newClassGroupsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newClassGroupsTable(schemaName, tableName, alias string) *ClassGroupsTable {
	return &ClassGroupsTable{
		classGroupsTable: newClassGroupsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newClassGroupsTableImpl("", "excluded", ""),
	}
}

func newClassGroupsTableImpl(schemaName, tableName, alias string) classGroupsTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		ClassIDColumn   = postgres.IntegerColumn("class_id")
		NameColumn      = postgres.StringColumn("name")
		ClassTypeColumn = postgres.StringColumn("class_type")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, ClassIDColumn, NameColumn, ClassTypeColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{ClassIDColumn, NameColumn, ClassTypeColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return classGroupsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		ClassID:   ClassIDColumn,
		Name:      NameColumn,
		ClassType: ClassTypeColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
