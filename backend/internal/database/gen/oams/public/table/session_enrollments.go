//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SessionEnrollments = newSessionEnrollmentsTable("public", "session_enrollments", "")

type sessionEnrollmentsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	SessionID postgres.ColumnInteger
	UserID    postgres.ColumnString
	Attended  postgres.ColumnBool
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SessionEnrollmentsTable struct {
	sessionEnrollmentsTable

	EXCLUDED sessionEnrollmentsTable
}

// AS creates new SessionEnrollmentsTable with assigned alias
func (a SessionEnrollmentsTable) AS(alias string) *SessionEnrollmentsTable {
	return newSessionEnrollmentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SessionEnrollmentsTable with assigned schema name
func (a SessionEnrollmentsTable) FromSchema(schemaName string) *SessionEnrollmentsTable {
	return newSessionEnrollmentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SessionEnrollmentsTable with assigned table prefix
func (a SessionEnrollmentsTable) WithPrefix(prefix string) *SessionEnrollmentsTable {
	return newSessionEnrollmentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SessionEnrollmentsTable with assigned table suffix
func (a SessionEnrollmentsTable) WithSuffix(suffix string) *SessionEnrollmentsTable {
	return newSessionEnrollmentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSessionEnrollmentsTable(schemaName, tableName, alias string) *SessionEnrollmentsTable {
	return &SessionEnrollmentsTable{
		sessionEnrollmentsTable: newSessionEnrollmentsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newSessionEnrollmentsTableImpl("", "excluded", ""),
	}
}

func newSessionEnrollmentsTableImpl(schemaName, tableName, alias string) sessionEnrollmentsTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		SessionIDColumn = postgres.IntegerColumn("session_id")
		UserIDColumn    = postgres.StringColumn("user_id")
		AttendedColumn  = postgres.BoolColumn("attended")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, SessionIDColumn, UserIDColumn, AttendedColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{SessionIDColumn, UserIDColumn, AttendedColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return sessionEnrollmentsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		SessionID: SessionIDColumn,
		UserID:    UserIDColumn,
		Attended:  AttendedColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
