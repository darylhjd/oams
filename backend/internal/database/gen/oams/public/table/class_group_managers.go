//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ClassGroupManagers = newClassGroupManagersTable("public", "class_group_managers", "class_group_manager")

type classGroupManagersTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	UserID       postgres.ColumnString
	ClassGroupID postgres.ColumnInteger
	ManagingRole postgres.ColumnString
	CreatedAt    postgres.ColumnTimestampz
	UpdatedAt    postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ClassGroupManagersTable struct {
	classGroupManagersTable

	EXCLUDED classGroupManagersTable
}

// AS creates new ClassGroupManagersTable with assigned alias
func (a ClassGroupManagersTable) AS(alias string) *ClassGroupManagersTable {
	return newClassGroupManagersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ClassGroupManagersTable with assigned schema name
func (a ClassGroupManagersTable) FromSchema(schemaName string) *ClassGroupManagersTable {
	return newClassGroupManagersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ClassGroupManagersTable with assigned table prefix
func (a ClassGroupManagersTable) WithPrefix(prefix string) *ClassGroupManagersTable {
	return newClassGroupManagersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ClassGroupManagersTable with assigned table suffix
func (a ClassGroupManagersTable) WithSuffix(suffix string) *ClassGroupManagersTable {
	return newClassGroupManagersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newClassGroupManagersTable(schemaName, tableName, alias string) *ClassGroupManagersTable {
	return &ClassGroupManagersTable{
		classGroupManagersTable: newClassGroupManagersTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newClassGroupManagersTableImpl("", "excluded", ""),
	}
}

func newClassGroupManagersTableImpl(schemaName, tableName, alias string) classGroupManagersTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		UserIDColumn       = postgres.StringColumn("user_id")
		ClassGroupIDColumn = postgres.IntegerColumn("class_group_id")
		ManagingRoleColumn = postgres.StringColumn("managing_role")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		allColumns         = postgres.ColumnList{IDColumn, UserIDColumn, ClassGroupIDColumn, ManagingRoleColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{UserIDColumn, ClassGroupIDColumn, ManagingRoleColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return classGroupManagersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		UserID:       UserIDColumn,
		ClassGroupID: ClassGroupIDColumn,
		ManagingRole: ManagingRoleColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
